{
  
    
        "post0": {
            "title": "Title",
            "content": "This notebook explores the Richter&#39;s Predictor: Modeling Earthquake Damage hosted by Driven Data. The 2015 earthquake that hit Gorkha in Western Nepal was measured 7.8 on richter scale and caused considerable damage. The damage to the buildings were graded in a scale of 1 to 3, 1 being the least damage and 3 being complete destruction. The data was collected through surveys by central bureau of statistics of Nepal. It is information on geographic and physical conditions of buildings and socio-economic-demograhic characteristics. The primary objective here is to predict the damage grade of buildings based on the provided data. . import pandas as pd import matplotlib.pyplot as plt import seaborn as sns . train_data = pd.read_csv(&#39;train_values.csv&#39;,index_col=&#39;building_id&#39;) train_label = pd.read_csv(&#39;train_labels.csv&#39;, index_col=&#39;building_id&#39;) . train_data.head() . geo_level_1_id geo_level_2_id geo_level_3_id count_floors_pre_eq age area_percentage height_percentage land_surface_condition foundation_type roof_type ... has_secondary_use_agriculture has_secondary_use_hotel has_secondary_use_rental has_secondary_use_institution has_secondary_use_school has_secondary_use_industry has_secondary_use_health_post has_secondary_use_gov_office has_secondary_use_use_police has_secondary_use_other . building_id . 802906 6 | 487 | 12198 | 2 | 30 | 6 | 5 | t | r | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 28830 8 | 900 | 2812 | 2 | 10 | 8 | 7 | o | r | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 94947 21 | 363 | 8973 | 2 | 10 | 5 | 5 | t | r | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 590882 22 | 418 | 10694 | 2 | 10 | 6 | 5 | t | r | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 201944 11 | 131 | 1488 | 3 | 30 | 8 | 9 | t | r | n | ... | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 5 rows × 38 columns . train_label.head() . damage_grade . building_id . 802906 3 | . 28830 2 | . 94947 3 | . 590882 2 | . 201944 3 | . all_data = train_data.join(train_label) all_data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 260601 entries, 802906 to 747594 Data columns (total 39 columns): # Column Non-Null Count Dtype -- -- 0 geo_level_1_id 260601 non-null int64 1 geo_level_2_id 260601 non-null int64 2 geo_level_3_id 260601 non-null int64 3 count_floors_pre_eq 260601 non-null int64 4 age 260601 non-null int64 5 area_percentage 260601 non-null int64 6 height_percentage 260601 non-null int64 7 land_surface_condition 260601 non-null object 8 foundation_type 260601 non-null object 9 roof_type 260601 non-null object 10 ground_floor_type 260601 non-null object 11 other_floor_type 260601 non-null object 12 position 260601 non-null object 13 plan_configuration 260601 non-null object 14 has_superstructure_adobe_mud 260601 non-null int64 15 has_superstructure_mud_mortar_stone 260601 non-null int64 16 has_superstructure_stone_flag 260601 non-null int64 17 has_superstructure_cement_mortar_stone 260601 non-null int64 18 has_superstructure_mud_mortar_brick 260601 non-null int64 19 has_superstructure_cement_mortar_brick 260601 non-null int64 20 has_superstructure_timber 260601 non-null int64 21 has_superstructure_bamboo 260601 non-null int64 22 has_superstructure_rc_non_engineered 260601 non-null int64 23 has_superstructure_rc_engineered 260601 non-null int64 24 has_superstructure_other 260601 non-null int64 25 legal_ownership_status 260601 non-null object 26 count_families 260601 non-null int64 27 has_secondary_use 260601 non-null int64 28 has_secondary_use_agriculture 260601 non-null int64 29 has_secondary_use_hotel 260601 non-null int64 30 has_secondary_use_rental 260601 non-null int64 31 has_secondary_use_institution 260601 non-null int64 32 has_secondary_use_school 260601 non-null int64 33 has_secondary_use_industry 260601 non-null int64 34 has_secondary_use_health_post 260601 non-null int64 35 has_secondary_use_gov_office 260601 non-null int64 36 has_secondary_use_use_police 260601 non-null int64 37 has_secondary_use_other 260601 non-null int64 38 damage_grade 260601 non-null int64 dtypes: int64(31), object(8) memory usage: 89.5+ MB . There are 39 columns, 31 are numeric and 8 are categorical. The data points are indetified with an unique &#39;building id&#39; identifier. The first three columns have information geographic regions to which buildings belong. The columns 14 through 24 are one hot encoded for same charateristics of type of superstructure of building. Similarly, Columns 27 through 37 are one hot encoded for same charateristics of secondary use of the building. We will explore the columns individual and try to understand how they relate to the damage grade of building itself. . sns.countplot(data=all_data, x=&#39;damage_grade&#39;) plt.show() . all_data[&#39;damage_grade&#39;].value_counts(normalize=True) . 2 0.568912 3 0.334680 1 0.096408 Name: damage_grade, dtype: float64 . The Damage grade . Distribution of damage grade shows that most buildings suffered from eaither moderate damage(57%) or complete destruction (33%). This shows devastating nature of the earthquake. However, there is a possibility of selection bias in data collection itself. The data collectors may have gravitated towards surveying the buidlings which were obvously most damaged or appeared most damged. We dont have enough inofrmation to rule it out. . geo_id_df = all_data[[&#39;geo_level_1_id&#39;, &#39;geo_level_2_id&#39;, &#39;geo_level_3_id&#39;]] geo_id_df.nunique() . geo_level_1_id 31 geo_level_2_id 1414 geo_level_3_id 11595 dtype: int64 . plt.figure(figsize=(14,8)) sns.set_style(&#39;dark&#39;) g = sns.countplot(data=all_data, x=&#39;geo_level_1_id&#39;, hue=&#39;damage_grade&#39;, palette=&#39;viridis&#39;) #g.set_yscale(&quot;log&quot;) plt.show() . Geography There are three columns with geographic region inofrmation. This information is a bit confusing. The &#39;geo_level_1_id&#39; ranges 0-30. It is not clear what these numbers actually represent. The assumptions here is &#39;geo_level_2_id&#39; and &#39;geo_level_3_id&#39; are detailed representations of &#39;geo_level_1_id&#39;. The geographic information is obviously important because the intensity and destructive power of an earthquake is closer to it&#39;s epicenter. The distribution of the buildings examined across &#39;geo_level_1_id&#39; shows that most of the damaged buildings were located in geographic regions 4,6,7,8,10, 17,20, 21, 26 and 27. Among these regions, the regions 8,17,18 stand out where the proportion of damage grade 3 buildings is eponentialy higher than other damge grades. . all_data[&#39;count_floors_pre_eq&#39;].value_counts(normalize=True) . 2 0.601007 3 0.213418 1 0.155184 4 0.020813 5 0.008619 6 0.000802 7 0.000150 9 0.000004 8 0.000004 Name: count_floors_pre_eq, dtype: float64 . ax = plt.figure(figsize=(14,8)) sns.set_style(&#39;dark&#39;) g = sns.countplot(data=all_data, x=&#39;count_floors_pre_eq&#39;, hue=&#39;damage_grade&#39;, palette=&#39;viridis&#39;) g.set_yscale(&quot;log&quot;) plt.show() . Floor Count . Number of floors of a building realtes to it&#39;s strucutral stability. 60% of the buidlings had 2 floors are 21% of the buidlings had 3 floors. The buidlings with 2-5 floors suffered more destruction as these buidlings had higher proprtion of damage grade 2 and 3. . ax = plt.figure(figsize=(14,8)) sns.set_style(&#39;dark&#39;) g = sns.countplot(data=all_data, x=&#39;age&#39;,hue=&#39;damage_grade&#39;,palette=&#39;viridis&#39;) g.set_yscale(&quot;log&quot;) plt.show() . plt.figure(figsize=(8,12)) sns.set_style(&#39;dark&#39;) g = sns.boxplot(data=all_data[all_data[&#39;age&#39;]&lt;=200], x=&#39;damage_grade&#39;,y=&#39;age&#39;,palette=&#39;viridis&#39;) #g.set_yscale(&quot;log&quot;) plt.show() . The age of the buildings is expected to influence the structural soundness of the building. The age of buidling ranges between 0-200 years and there is a cluster of buildings plder than 200 years. Their age is listed as 995 years. This is either &#39;na&#39; value or very old buildings whoose age could not be ascertained. In general, severity of damage to buildings seems to be increasing with it&#39;s age. . all_data[&#39;area_percentage&#39;].describe() . count 260601.000000 mean 8.018051 std 4.392231 min 1.000000 25% 5.000000 50% 7.000000 75% 9.000000 max 100.000000 Name: area_percentage, dtype: float64 . plt.figure(figsize=(16,8)) sns.set_style(&#39;dark&#39;) g = sns.histplot(data=all_data, x=&#39;area_percentage&#39;,hue=&#39;damage_grade&#39;,discrete=True,palette=&#39;viridis&#39;) g.set_yscale(&quot;log&quot;) plt.show() . The area_percentage is described as the normalized area of the building footprint.So, higher the area_percentage, bigger the house. This distribution skewed to left. The damge severity is higher with smaller size(area_percentage&lt;15) . data_obj = all_data.select_dtypes(&#39;object&#39;) data_obj.columns . Index([&#39;land_surface_condition&#39;, &#39;foundation_type&#39;, &#39;roof_type&#39;, &#39;ground_floor_type&#39;, &#39;other_floor_type&#39;, &#39;position&#39;, &#39;plan_configuration&#39;, &#39;legal_ownership_status&#39;], dtype=&#39;object&#39;) . fig, ax = plt.subplots(2, 4, figsize= (20,10)) ax = ax.flatten() for i, col in list(zip(ax, data_obj.columns.to_list())): sns.countplot(data=all_data, x=col, ax=i, hue=&#39;damage_grade&#39;,palette=&#39;viridis&#39;) i.set_yscale(&quot;log&quot;) . all_data[&#39;has_superstructure_adobe_mud&#39;].value_counts() . 0 237500 1 23101 Name: has_superstructure_adobe_mud, dtype: int64 . import re a_list = [] for i in all_data.columns.to_list(): if re.search(r&quot; Ahas_superstructure_.&quot;, i): a_list.append(i) . re.split(r&quot; Ahas_superstructure_&quot;,a_list[0]) . [&#39;&#39;, &#39;adobe_mud&#39;] . all_data[a_list] . has_superstructure_adobe_mud has_superstructure_mud_mortar_stone has_superstructure_stone_flag has_superstructure_cement_mortar_stone has_superstructure_mud_mortar_brick has_superstructure_cement_mortar_brick has_superstructure_timber has_superstructure_bamboo has_superstructure_rc_non_engineered has_superstructure_rc_engineered has_superstructure_other . building_id . 802906 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 28830 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 94947 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 590882 0 | 1 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | . 201944 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 688636 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 669485 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 602512 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 151409 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | . 747594 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 260601 rows × 11 columns . fig, ax = plt.subplots(3, 4, figsize= (20,10)) ax = ax.flatten() for i, col in list(zip(ax, a_list)): sns.countplot(data=all_data, x=col, ax=i, hue=&#39;damage_grade&#39;,palette=&#39;YlGnBu&#39;) i.set_yscale(&quot;log&quot;) . b_list = [] for i in all_data.columns.to_list(): if re.search(r&quot; Ahas_secondary_.&quot;, i): b_list.append(i) all_data[b_list] . has_secondary_use has_secondary_use_agriculture has_secondary_use_hotel has_secondary_use_rental has_secondary_use_institution has_secondary_use_school has_secondary_use_industry has_secondary_use_health_post has_secondary_use_gov_office has_secondary_use_use_police has_secondary_use_other . building_id . 802906 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 28830 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 94947 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 590882 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 201944 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 688636 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 669485 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 602512 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 151409 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 747594 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 260601 rows × 11 columns . idx = all_data[all_data[&#39;has_secondary_use&#39;]== 1].index all_data[b_list].loc[idx] . has_secondary_use has_secondary_use_agriculture has_secondary_use_hotel has_secondary_use_rental has_secondary_use_institution has_secondary_use_school has_secondary_use_industry has_secondary_use_health_post has_secondary_use_gov_office has_secondary_use_use_police has_secondary_use_other . building_id . 333020 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 793397 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 973909 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 440102 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 552720 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 977263 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 317439 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 603159 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 560805 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 226421 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 29156 rows × 11 columns . fig, ax = plt.subplots(3, 4, figsize= (20,10)) ax = ax.flatten() for i, col in list(zip(ax, b_list)): sns.countplot(data=all_data, x=col, ax=i, hue=&#39;damage_grade&#39;,palette=&#39;YlGnBu&#39;) i.set_yscale(&quot;log&quot;) . all_data[&#39;count_families&#39;].value_counts() . 1 226115 0 20862 2 11294 3 1802 4 389 5 104 6 22 7 7 9 4 8 2 Name: count_families, dtype: int64 . ax = plt.figure(figsize=(14,8)) sns.set_style(&#39;dark&#39;) g = sns.countplot(data=all_data, x=&#39;count_families&#39;, hue=&#39;damage_grade&#39;, palette=&#39;YlGnBu&#39;) g.set_yscale(&quot;log&quot;) plt.show() .",
            "url": "https://arkhnl.github.io/ak_blog/2021/01/28/EQ_EDA.html",
            "relUrl": "/2021/01/28/EQ_EDA.html",
            "date": " • Jan 28, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://arkhnl.github.io/ak_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://arkhnl.github.io/ak_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://arkhnl.github.io/ak_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://arkhnl.github.io/ak_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}